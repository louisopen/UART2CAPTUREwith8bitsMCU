; Generated by holtek-gcc v3.19, Wed Dec 02 18:41:46 2020
; 
; Configuration:
;       without long instruction
;       Single ROM, Multi-RAM
;       bits_per_rom_unit:16
;       with mp1
;       with tbhp, address(0x9)
;          Use tabrd-const
;       
;       
;       
; use 'tabrdc' instead of 'tabrd'
;       

#pragma translator "holtek-gcc 4.6.4" "3.19" "build 20130711"
; Rebuild 718

ir equ [2]
mp equ [3]
sbp equ [1]
acc equ [5]
bp equ [4]
tblp equ [7]
tbhp equ [9]
status equ [10]
c equ [10].0
ac equ [10].1
z equ [10].2
ov equ [10].3
intc equ [11]

extern ra:byte
extern rb:byte
extern rc:byte
extern rd:byte
extern re:byte
extern rf:byte
extern rg:byte
extern rh:byte
extern _Crom2Prom:near
extern _Crom2PromNext:near

RAMBANK 0 @HCCINIT, @HCCINIT0

RAMBANK 0 @BITDATASEC, @BITDATASEC1
@HCCINIT	.section 'data'
@HCCINIT0	.section 'data'
@BITDATASEC	 .section 'data'
@BITDATASEC1	 .section 'data'

#pragma debug scope 1 1
	extern __DELAY3:near
	extern __DELAYX3:near
	extern __DELAYX6:near
	extern __DELAYY5:near
	extern __DELAYY3:near
	extern _builtin_holtek_delay_2:byte
___pcc equ [65]
___pc equ [64]
___pcpu equ [66]
___ucr1 equ [69]
___ucr2 equ [70]
___brg equ [71]
___intc2 equ [16]
public _Uart_Init
#pragma debug scope 2 1
#line 52 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
_Uart_Init .section 'code'
_Uart_Init proc
#line 53 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	clr [65].2
#line 54 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	clr [64].2
#line 56 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	clr [65].3
#line 57 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	set [65].4
#line 58 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	set [64].3
#line 59 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	set [64].4
#line 60 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	set [66].3
#line 61 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	set [66].4
#line 63 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,128
	mov [69],a
#line 64 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,229
	mov [70],a
#line 65 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	set [70].2
#line 67 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,51
	mov [71],a
#line 71 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	clr _rx_guide[0]
#line 72 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	clr _tx_guide[0]
#line 73 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	set [16].3
	ret
_Uart_Init endp
#line 73 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
#pragma debug scope 1 1
public _Uart_off
#pragma debug scope 3 1
#line 82 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
_Uart_off .section 'code'
_Uart_off proc
#line 83 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	clr [70].2
#line 88 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	set [64].3
#line 89 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	set [65].4
	ret
_Uart_off endp
#line 89 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
#pragma debug scope 1 1
___usr equ [68]
___acc equ [5]
___txr_rxr equ [72]
public _UART_ISR
#pragma debug scope 4 1
#line 99 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
@UART_ISR_code .section at 44 'code'
	mov r1,a
	mov a,status
	mov r2,a
	jmp _UART_ISR
#pragma debug scope 1 1
@dummy44 proc
	call _UART_ISR
@dummy44 endp
#pragma debug scope 5 1
_UART_ISR .section 'code'
_UART_ISR proc
	mov a,bp
	mov r3,a
	mov a,mp
	mov r4,a
	mov a,sbp
	mov r5,a
	mov a,tblp
	mov r6,a
	mov a,tbhp
	mov r7,a
#line 101 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	sz [68].7
	jmp _L4
#line 101 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	sz [68].6
	jmp _L4
	sz [68].5
	jmp _L4
	snz [68].4
	jmp _L5
_L4:
#line 103 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,[68]
	mov [5],a
#line 104 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,[72]
	mov [5],a
#line 105 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	clr _rx_guide[0]
	jmp _L3
_L5:
#line 109 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	snz [68].2
	jmp _L7
#line 111 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,_rx_guide[0]
	mov ra,a
	mov a,7
	sub a,ra
	sz c
	jmp _L8
#line 113 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,8
	mov _rx_guide[0],a
	jmp _L9
_L8:
#line 117 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,low offset _array_uart_rxbuff
	add a,ra
	mov mp,a
	mov a,high offset _array_uart_rxbuff
	clr sbp
	adcm a,sbp
	mov a,sbp
	mov bp,a
	mov a,[72]
	mov ir,a
#line 118 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	inc ra
	mov a,ra
	mov _rx_guide[0],a
#line 119 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,ra
	sub a,8
	snz z
	jmp _L9
	mov a,_array_uart_rxbuff[7]
	sub a,10
	snz z
	jmp _L9
#line 121 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	set _interrupt_flag[0].3
_L9:
#line 129 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
;# 129 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c" 1
	nop
	jmp _L3
_L7:
#line 133 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	snz [68].0
	jmp _L3
#line 135 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,_tx_guide[0]
	mov ra,a
	sz ra
	jmp _LI1
	jmp _L10
_LI1:
#line 137 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	deca ra
	mov _tx_guide[0],a
#line 138 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	inca _tx_index[0]
	mov ra,a
	mov a,ra
	mov _tx_index[0],a
#line 139 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,low offset _array_uart_txbuff
	add a,ra
	mov mp,a
	mov a,high offset _array_uart_txbuff
	clr sbp
	adcm a,sbp
	call _Crom2Prom
	mov [72],a
	jmp _L3
_L10:
#line 143 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,229
	mov [70],a
#line 146 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	clr _rx_guide[0]
#line 147 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	clr [64].2
_L3:
	mov a,r2
	mov status,a
	mov a,r3
	mov bp,a
	mov a,r4
	mov mp,a
	mov a,r5
	mov sbp,a
	mov a,r6
	mov tblp,a
	mov a,r7
	mov tbhp,a
	tabrdc acc
	mov a,r1
	reti
_UART_ISR endp

#line 147 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
#pragma debug scope 1 1
public _calc_crc
#pragma debug scope 6 1
#line 328 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
_calc_crc .section 'code'
_calc_crc proc
public _calc_crc_2
    local _calc_crc_2 db 3 dup(?)	; 3,0
#pragma debug pointer 42 8 6
#pragma debug variable 42 6 _calc_crc_2+0 "pointer"
#pragma debug variable 8 6 _calc_crc_2+2 "length"
#line 330 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	set _reg_crc[0]
	set _reg_crc[1]
	mov a,_calc_crc_2[0]
	mov rd,a
	mov a,_calc_crc_2[1]
	mov re,a
#line 331 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	clr ra
_L16:
#line 331 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,ra
	sub a,_calc_crc_2[2]
	sz z
	jmp _L22
#line 335 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,rd
	mov mp,a
	mov a,re
	mov sbp,a
	call _Crom2Prom
	mov rb,a
	clr rc
	mov a,_reg_crc[1]
	xorm a,rc
	mov a,_reg_crc[0]
	xorm a,rb
	mov a,8
	mov rf,a
_L20:
#line 338 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	snz rb.0
	jmp _L17
#line 340 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	clr c
	rrc rc
	rrc rb
#line 341 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,160
	xorm a,rc
	mov a,1
	xorm a,rb
	jmp _L18
_L17:
#line 345 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	clr c
	rrc rc
	rrc rb
_L18:
	sdz rf
	jmp _L20
	mov a,rb
	mov _reg_crc[0],a
	mov a,rc
	mov _reg_crc[1],a
#line 331 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	inc ra
	inc rd
	sz z
	inc re
	jmp _L16
_L22:
#line 351 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,_reg_crc[0]
	mov ra,a
	mov a,_reg_crc[1]
	mov rb,a
	ret
_calc_crc endp
#line 351 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
#pragma debug scope 1 1
public _Uart_TXD_Send
#pragma debug scope 7 1
#line 237 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
_Uart_TXD_Send .section 'code'
_Uart_TXD_Send proc
public _Uart_TXD_Send_2
    local _Uart_TXD_Send_2 db 2 dup(?)	; 2,0
#pragma debug variable 12 7 _Uart_TXD_Send_2+0 "tx_data"
#line 238 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,9
	mov _tx_guide[0],a
#line 239 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	clr _tx_index[0]
#line 240 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	set [64].2
#line 244 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,68
	mov _array_uart_txbuff[0],a
#line 245 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,1
	mov _array_uart_txbuff[1],a
#line 246 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,4
	mov _array_uart_txbuff[2],a
#line 247 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,_Uart_TXD_Send_2[0]
	mov rb,a
	mov a,_Uart_TXD_Send_2[1]
	mov rc,a
	mov a,rc
	mov rb,a
	clr rc
	mov a,rb
	mov _array_uart_txbuff[3],a
#line 248 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,_Uart_TXD_Send_2[0]
	mov ra,a
	mov a,ra
	mov _array_uart_txbuff[4],a
#line 249 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,rb
	mov _array_uart_txbuff[5],a
#line 250 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,ra
	mov _array_uart_txbuff[6],a
#line 252 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,7
	mov _calc_crc_2[2],a
	mov a,low offset _array_uart_txbuff
	mov _calc_crc_2[0],a
	mov a,high offset _array_uart_txbuff
	mov _calc_crc_2[1],a
	call _calc_crc
#line 254 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,_reg_crc[0]
	mov _array_uart_txbuff[7],a
#line 255 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,_reg_crc[1]
	mov _array_uart_txbuff[8],a
#line 257 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,_array_uart_txbuff[0]
	mov [72],a
#line 258 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	dec _tx_guide[0]
	ret
_Uart_TXD_Send endp
#line 258 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
#pragma debug scope 1 1
public _Buffer_Send06
#pragma debug scope 8 1
#line 266 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
_Buffer_Send06 .section 'code'
_Buffer_Send06 proc
    local _Buffer_Send06_2 db 1 dup(?)	; 0,1
	mov ra,a
	mov _Buffer_Send06_2[0],a
#pragma debug variable 8 8 _Buffer_Send06_2+0 "count"
#line 268 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,12
	sub a,ra
	snz c
	jmp _L24
#line 273 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,ra
	add a,4
	mov _tx_guide[0],a
#line 274 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	clr _tx_index[0]
#line 275 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	set [64].2
#line 279 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,68
	mov _array_uart_txbuff[0],a
#line 280 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,_array_uart_rxbuff[1]
	mov _array_uart_txbuff[1],a
#line 283 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,ra
	add a,2
	mov _calc_crc_2[2],a
	mov a,low offset _array_uart_txbuff
	mov _calc_crc_2[0],a
	mov a,high offset _array_uart_txbuff
	mov _calc_crc_2[1],a
	call _calc_crc
#line 285 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,_Buffer_Send06_2[0]
	mov rb,a
	clr rc
	mov a,_reg_crc[1]
	mov ra,a
	mov a,low (offset _array_uart_txbuff+2)
	add a,rb
	mov mp,a
	mov a,high (offset _array_uart_txbuff+2)
	adc a,rc
	mov sbp,a
	mov a,sbp
	mov bp,a
	mov a,_reg_crc[0]
	mov ir,a
#line 286 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,low (offset _array_uart_txbuff+3)
	add a,rb
	mov mp,a
	mov a,high (offset _array_uart_txbuff+3)
	adc a,rc
	mov sbp,a
	mov a,sbp
	mov bp,a
	mov a,ra
	mov ir,a
#line 288 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,_array_uart_txbuff[0]
	mov [72],a
#line 289 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	dec _tx_guide[0]
_L24:
	ret
_Buffer_Send06 endp
#line 289 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
#pragma debug scope 1 1
public _Buffer_Send03
#pragma debug scope 9 1
#line 297 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
_Buffer_Send03 .section 'code'
_Buffer_Send03 proc
    local _Buffer_Send03_2 db 1 dup(?)	; 0,1
	mov ra,a
	mov _Buffer_Send03_2[0],a
#pragma debug variable 8 9 _Buffer_Send03_2+0 "count"
#line 299 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,11
	sub a,ra
	snz c
	jmp _L26
#pragma debug scope 10 9
;begin block, line: 299.-1
#pragma debug scope 11 10
;begin block, line: 299.-1
#line 304 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,ra
	add a,5
	mov _tx_guide[0],a
#line 305 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	clr _tx_index[0]
#line 306 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	set [64].2
#line 310 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,68
	mov _array_uart_txbuff[0],a
#line 311 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,_array_uart_rxbuff[1]
	mov _array_uart_txbuff[1],a
#line 312 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,_Buffer_Send03_2[0]
	mov _array_uart_txbuff[2],a
#line 314 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,ra
	add a,3
	mov _calc_crc_2[2],a
	mov a,low offset _array_uart_txbuff
	mov _calc_crc_2[0],a
	mov a,high offset _array_uart_txbuff
	mov _calc_crc_2[1],a
	call _calc_crc
#line 316 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,_Buffer_Send03_2[0]
	mov rb,a
	clr rc
	mov a,_reg_crc[1]
	mov ra,a
	mov a,low (offset _array_uart_txbuff+3)
	add a,rb
	mov mp,a
	mov a,high (offset _array_uart_txbuff+3)
	adc a,rc
	mov sbp,a
	mov a,sbp
	mov bp,a
	mov a,_reg_crc[0]
	mov ir,a
#line 317 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,low (offset _array_uart_txbuff+4)
	add a,rb
	mov mp,a
	mov a,high (offset _array_uart_txbuff+4)
	adc a,rc
	mov sbp,a
	mov a,sbp
	mov bp,a
	mov a,ra
	mov ir,a
#line 319 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,_array_uart_txbuff[0]
	mov [72],a
#line 320 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	dec _tx_guide[0]
_L26:
#pragma debug scope 10 9
#pragma debug scope 9 1
	ret
_Buffer_Send03 endp
#line 320 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
#pragma debug scope 1 1
public _Uart_RXD_Manage
#pragma debug scope 12 1
#line 161 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
_Uart_RXD_Manage .section 'code'
_Uart_RXD_Manage proc
    local _Uart_RXD_Manage_2 db 3 dup(?)	; 0,3
#pragma debug variable 8 12 _Uart_RXD_Manage_2+0 "i"
#line 163 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	snz _interrupt_flag[0].3
	jmp _L29
#line 165 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	clr _interrupt_flag[0].3
#line 166 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,_array_uart_rxbuff[0]
	sub a,68
	snz z
	jmp _L38
	mov a,_array_uart_rxbuff[7]
	sub a,10
	snz z
	jmp _L38
#line 168 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,_array_uart_rxbuff[1]
	sub a,3
	sz z
	jmp _L31
	mov a,_array_uart_rxbuff[1]
	sub a,6
	snz z
	jmp _L38
#line 206 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,_array_uart_rxbuff[4]
	mov _Write_EEPROM_2[0],a
	mov a,_array_uart_rxbuff[3]
	call _Write_EEPROM
#line 207 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	inca _array_uart_rxbuff[3]
	mov ra,a
	mov a,_array_uart_rxbuff[5]
	mov _Write_EEPROM_2[0],a
	mov a,ra
	call _Write_EEPROM
#line 210 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,_array_uart_rxbuff[2]
	mov _array_uart_txbuff[2],a
	mov a,_array_uart_rxbuff[3]
	mov _array_uart_txbuff[3],a
	mov a,_array_uart_rxbuff[4]
	mov _array_uart_txbuff[4],a
	mov a,_array_uart_rxbuff[5]
	mov _array_uart_txbuff[5],a
#line 212 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,4
	call _Buffer_Send06
#line 213 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	jmp _L38
_L31:
#line 183 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,_array_uart_rxbuff[2]
	sub a,3
	sz z
	jmp _L33
	clr _Uart_RXD_Manage_2[0]
	jmp _L34
_L33:
#line 186 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,_capture_val[3]
	mov _array_uart_txbuff[4],a
#line 187 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,_capture_val[2]
	mov _array_uart_txbuff[5],a
#line 188 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,_capture_val[1]
	mov _array_uart_txbuff[6],a
#line 189 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,_capture_val[0]
	mov _array_uart_txbuff[7],a
#line 190 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,4
	jmp _L37
_L34:
#line 195 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,_Uart_RXD_Manage_2[0]
	mov _Uart_RXD_Manage_2[1],a
	clr _Uart_RXD_Manage_2[2]
	mov a,_array_uart_rxbuff[5]
	mov ra,a
	mov a,ra
	mov rb,a
	clr rc
	clr c
	rlc rb
	rlc rc
	mov a,_Uart_RXD_Manage_2[1]
	sub a,rb
	mov a,_Uart_RXD_Manage_2[2]
	sbc a,rc
	swap acc
	xor a,status
	snz acc.3
	jmp _L39
#line 197 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,_Uart_RXD_Manage_2[0]
	add a,_array_uart_rxbuff[3]
	mov ra,a
	mov a,ra
	call _Read_EEPROM
	mov ra,a
	mov a,low (offset _array_uart_txbuff+3)
	add a,_Uart_RXD_Manage_2[1]
	mov mp,a
	mov a,high (offset _array_uart_txbuff+3)
	adc a,_Uart_RXD_Manage_2[2]
	mov sbp,a
	mov a,sbp
	mov bp,a
	mov a,ra
	mov ir,a
#line 198 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,_Uart_RXD_Manage_2[0]
	add a,_array_uart_rxbuff[3]
	mov ra,a
	inc ra
	mov a,ra
	call _Read_EEPROM
	mov ra,a
	mov a,low (offset _array_uart_txbuff+4)
	add a,_Uart_RXD_Manage_2[1]
	mov mp,a
	mov a,high (offset _array_uart_txbuff+4)
	adc a,_Uart_RXD_Manage_2[2]
	mov sbp,a
	mov a,sbp
	mov bp,a
	mov a,ra
	mov ir,a
#line 195 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,2
	addm a,_Uart_RXD_Manage_2[0]
	jmp _L34
_L39:
#line 201 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,ra
	addm a,ra
	mov a,ra
_L37:
	call _Buffer_Send03
	jmp _L38
_L29:
#line 223 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	mov a,150
	sub a,_rx_watchdog[0]
	sz c
	jmp _L28
#line 225 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	clr _rx_watchdog[0]
_L38:
#line 226 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
	clr _rx_guide[0]
_L28:
	ret
_Uart_RXD_Manage endp
#line 226 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
#pragma debug scope 1 1
#line 43 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
public _reg_crc
@HCCINIT0 .section 'data'
_reg_crc	db 2 dup(0)
#pragma debug struct_begin 43 ""
#pragma debug field 0 8 "byte0"
#pragma debug field 0 8 "byte1"
#pragma debug struct_end
#pragma debug struct_begin 44 "__16_bits"
#pragma debug field 21 8 0 1 "b0" ;0,1
#pragma debug field 21 8 0 1 "b1" ;1,1
#pragma debug field 21 8 0 1 "b2" ;2,1
#pragma debug field 21 8 0 1 "b3" ;3,1
#pragma debug field 21 8 0 1 "b4" ;4,1
#pragma debug field 21 8 0 1 "b5" ;5,1
#pragma debug field 21 8 0 1 "b6" ;6,1
#pragma debug field 21 8 0 1 "b7" ;7,1
#pragma debug field 21 8 1 1 "b8" ;8,1
#pragma debug field 21 8 0 1 "b9" ;9,1
#pragma debug field 21 8 0 1 "b10" ;10,1
#pragma debug field 21 8 0 1 "b11" ;11,1
#pragma debug field 21 8 0 1 "b12" ;12,1
#pragma debug field 21 8 0 1 "b13" ;13,1
#pragma debug field 21 8 0 1 "b14" ;14,1
#pragma debug field 21 8 0 1 "b15" ;15,1
#pragma debug struct_end
#pragma debug union_begin 45 ""
#pragma debug field 2 43 "byte"
#pragma debug field 2 44 "bits"
#pragma debug field 0 11 "s16"
#pragma debug field 0 12 "u16"
#pragma debug union_end
#pragma debug variable 45 1 _reg_crc "reg_crc"

@HCCINIT .section 'data'
#line 41 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
public _array_uart_rxbuff
@HCCINIT0 .section 'data'
_array_uart_rxbuff	db 8 dup(0)
#pragma debug array 46 8 8 1
#pragma debug variable 46 1 _array_uart_rxbuff "array_uart_rxbuff"

@HCCINIT .section 'data'
#line 40 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
public _array_uart_txbuff
@HCCINIT0 .section 'data'
_array_uart_txbuff	db 16 dup(0)
#pragma debug array 47 8 16 1
#pragma debug variable 47 1 _array_uart_txbuff "array_uart_txbuff"

@HCCINIT .section 'data'
#line 39 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
public _tx_guide
@HCCINIT0 .section 'data'
_tx_guide	db 0
#pragma debug variable 8 1 _tx_guide "tx_guide"

@HCCINIT .section 'data'
#line 38 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
public _rx_guide
@HCCINIT0 .section 'data'
_rx_guide	db 0
#pragma debug variable 8 1 _rx_guide "rx_guide"

@HCCINIT .section 'data'
#line 37 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
public _tx_index
@HCCINIT0 .section 'data'
_tx_index	db 0
#pragma debug variable 8 1 _tx_index "tx_index"

@HCCINIT .section 'data'
#line 36 "C:\ChipsGarden\醇法\MK8000\MK8000-Power PCB\UART2CAPTUREwith8bitsMCU\UART2CAPTUREwith8bitsMCU\Uart.c"
public _rx_watchdog
@HCCINIT0 .section 'data'
_rx_watchdog	db 0
#pragma debug variable 8 1 _rx_watchdog "rx_watchdog"

@HCCINIT .section 'data'
#pragma debug variable 8 1 ___acc "__acc" 1
#pragma debug struct_begin 48 "__intc2_bits"
#pragma debug field 21 8 0 1 "__tb1e" ;0,1
#pragma debug field 21 8 0 1 "__int1e" ;1,1
#pragma debug field 21 8 0 1 "__iice" ;2,1
#pragma debug field 21 8 0 1 "__uarte" ;3,1
#pragma debug field 21 8 0 1 "__tb1f" ;4,1
#pragma debug field 21 8 0 1 "__int1f" ;5,1
#pragma debug field 21 8 0 1 "__iicf" ;6,1
#pragma debug field 21 8 0 1 "__uartf" ;7,1
#pragma debug struct_end
#pragma debug union_begin 49 ""
#pragma debug field 2 48 "bits"
#pragma debug field 0 8 "byte"
#pragma debug union_end
#pragma debug variable 49 1 ___intc2 "__intc2" 1
#pragma debug struct_begin 50 "__pc_bits"
#pragma debug field 21 8 0 1 "__pc0" ;0,1
#pragma debug field 21 8 0 1 "__pc1" ;1,1
#pragma debug field 21 8 0 1 "__pc2" ;2,1
#pragma debug field 21 8 0 1 "__pc3" ;3,1
#pragma debug field 21 8 0 1 "__pc4" ;4,1
#pragma debug field 21 8 0 1 "__pc5" ;5,1
#pragma debug field 21 8 0 1 "__pc6" ;6,1
#pragma debug field 21 8 0 1 ;7,1
#pragma debug struct_end
#pragma debug union_begin 51 ""
#pragma debug field 2 50 "bits"
#pragma debug field 0 8 "byte"
#pragma debug union_end
#pragma debug variable 51 1 ___pc "__pc" 1
#pragma debug struct_begin 52 "__pcc_bits"
#pragma debug field 21 8 0 1 "__pcc0" ;0,1
#pragma debug field 21 8 0 1 "__pcc1" ;1,1
#pragma debug field 21 8 0 1 "__pcc2" ;2,1
#pragma debug field 21 8 0 1 "__pcc3" ;3,1
#pragma debug field 21 8 0 1 "__pcc4" ;4,1
#pragma debug field 21 8 0 1 "__pcc5" ;5,1
#pragma debug field 21 8 0 1 "__pcc6" ;6,1
#pragma debug field 21 8 0 1 ;7,1
#pragma debug struct_end
#pragma debug union_begin 53 ""
#pragma debug field 2 52 "bits"
#pragma debug field 0 8 "byte"
#pragma debug union_end
#pragma debug variable 53 1 ___pcc "__pcc" 1
#pragma debug struct_begin 54 "__pcpu_bits"
#pragma debug field 21 8 0 1 "__pcpu0" ;0,1
#pragma debug field 21 8 0 1 "__pcpu1" ;1,1
#pragma debug field 21 8 0 1 "__pcpu2" ;2,1
#pragma debug field 21 8 0 1 "__pcpu3" ;3,1
#pragma debug field 21 8 0 1 "__pcpu4" ;4,1
#pragma debug field 21 8 0 1 "__pcpu5" ;5,1
#pragma debug field 21 8 0 1 "__pcpu6" ;6,1
#pragma debug field 21 8 0 1 ;7,1
#pragma debug struct_end
#pragma debug union_begin 55 ""
#pragma debug field 2 54 "bits"
#pragma debug field 0 8 "byte"
#pragma debug union_end
#pragma debug variable 55 1 ___pcpu "__pcpu" 1
#pragma debug struct_begin 56 "__usr_bits"
#pragma debug field 21 8 0 1 "__txif" ;0,1
#pragma debug field 21 8 0 1 "__tidle" ;1,1
#pragma debug field 21 8 0 1 "__rxif" ;2,1
#pragma debug field 21 8 0 1 "__ridle" ;3,1
#pragma debug field 21 8 0 1 "__oerr" ;4,1
#pragma debug field 21 8 0 1 "__ferr" ;5,1
#pragma debug field 21 8 0 1 "__nf" ;6,1
#pragma debug field 21 8 0 1 "__perr" ;7,1
#pragma debug struct_end
#pragma debug union_begin 57 ""
#pragma debug field 2 56 "bits"
#pragma debug field 0 8 "byte"
#pragma debug union_end
#pragma debug variable 57 1 ___usr "__usr" 1
#pragma debug struct_begin 58 "__ucr1_bits"
#pragma debug field 21 8 0 1 "__tx8" ;0,1
#pragma debug field 21 8 0 1 "__rx8" ;1,1
#pragma debug field 21 8 0 1 "__txbrk" ;2,1
#pragma debug field 21 8 0 1 "__stops" ;3,1
#pragma debug field 21 8 0 1 "__prt" ;4,1
#pragma debug field 21 8 0 1 "__pren" ;5,1
#pragma debug field 21 8 0 1 "__bno" ;6,1
#pragma debug field 21 8 0 1 "__uarten" ;7,1
#pragma debug struct_end
#pragma debug union_begin 59 ""
#pragma debug field 2 58 "bits"
#pragma debug field 0 8 "byte"
#pragma debug union_end
#pragma debug variable 59 1 ___ucr1 "__ucr1" 1
#pragma debug struct_begin 60 "__ucr2_bits"
#pragma debug field 21 8 0 1 "__teie" ;0,1
#pragma debug field 21 8 0 1 "__tiie" ;1,1
#pragma debug field 21 8 0 1 "__rie" ;2,1
#pragma debug field 21 8 0 1 "__wake" ;3,1
#pragma debug field 21 8 0 1 "__adden" ;4,1
#pragma debug field 21 8 0 1 "__brgh" ;5,1
#pragma debug field 21 8 0 1 "__rxen" ;6,1
#pragma debug field 21 8 0 1 "__txen" ;7,1
#pragma debug struct_end
#pragma debug union_begin 61 ""
#pragma debug field 2 60 "bits"
#pragma debug field 0 8 "byte"
#pragma debug union_end
#pragma debug variable 61 1 ___ucr2 "__ucr2" 1
#pragma debug struct_begin 62 "__brg_bits"
#pragma debug field 21 8 0 1 "__brg0" ;0,1
#pragma debug field 21 8 0 1 "__brg1" ;1,1
#pragma debug field 21 8 0 1 "__brg2" ;2,1
#pragma debug field 21 8 0 1 "__brg3" ;3,1
#pragma debug field 21 8 0 1 "__brg4" ;4,1
#pragma debug field 21 8 0 1 "__brg5" ;5,1
#pragma debug field 21 8 0 1 "__brg6" ;6,1
#pragma debug field 21 8 0 1 "__brg7" ;7,1
#pragma debug struct_end
#pragma debug union_begin 63 ""
#pragma debug field 2 62 "bits"
#pragma debug field 0 8 "byte"
#pragma debug union_end
#pragma debug variable 63 1 ___brg "__brg" 1
#pragma debug struct_begin 64 "__txr_rxr_bits"
#pragma debug field 21 8 0 1 "__txrx0" ;0,1
#pragma debug field 21 8 0 1 "__txrx1" ;1,1
#pragma debug field 21 8 0 1 "__txrx2" ;2,1
#pragma debug field 21 8 0 1 "__txrx3" ;3,1
#pragma debug field 21 8 0 1 "__txrx4" ;4,1
#pragma debug field 21 8 0 1 "__txrx5" ;5,1
#pragma debug field 21 8 0 1 "__txrx6" ;6,1
#pragma debug field 21 8 0 1 "__txrx7" ;7,1
#pragma debug struct_end
#pragma debug union_begin 65 ""
#pragma debug field 2 64 "bits"
#pragma debug field 0 8 "byte"
#pragma debug union_end
#pragma debug variable 65 1 ___txr_rxr "__txr_rxr" 1

; output external variables
extern _capture_val:byte
extern _interrupt_flag:byte
extern r1:byte
extern r2:byte
extern r3:byte
extern r4:byte
extern r5:byte
extern r6:byte
extern r7:byte
extern _Write_EEPROM_2:byte
extern _Write_EEPROM:near
extern _Read_EEPROM:near

; 
; Generated by holtek-gcc v3.19, Wed Dec 02 18:41:46 2020
; Rebuild 718
; end of file
